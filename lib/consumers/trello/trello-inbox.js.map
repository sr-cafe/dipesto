{"version":3,"sources":["../../../src/consumers/trello/trello-inbox.es6"],"names":[],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AAEA;;;;AACA;;;;;;AAEA,IAAI,KAAK,mBAAQ,YAAR,CAAqB,QAAQ,IAAR,CAArB,CAAL;;AAGJ,IAAI,4BAA4B,gBAAE,KAAF,CAAQ,UAAS,WAAT,EAAsB,IAAtB,EAA2B;AAClE,KAAI,oBAAoB,YAAY,MAAZ,CAAmB,UAAS,UAAT,EAAoB;AAC9D,SAAO,WAAW,EAAX,KAAkB,KAAK,EAAL,CADqC;EAApB,CAAvC,CAD8D;;AAKlE,QAAQ,kBAAkB,MAAlB,KAA6B,CAA7B,CAL0D;CAA3B,CAApC;;AAQJ,IAAI,UAAU,kBAAQ,UAAR,CAAmB,SAAnB,EAA8B,QAA9B,CAAuC,MAAvC,CAA8C,UAAS,OAAT,EAAiB;AAC5E,QAAO,QAAQ,IAAR,2BAAP,CAD4E;CAAjB,CAA9C,CAEX,CAFW,EAER,MAFQ;;AAId,IAAI,oBAAoB,SAApB,iBAAoB,CAAS,IAAT,EAAc;AACrC,KAAI,UAAU,CAAC,KAAK,IAAL,CAAX,CADiC;;AAGrC,KAAG,KAAK,IAAL,EAAU;AACZ,YAAU,QAAQ,MAAR,CAAe,KAAK,IAAL,CAAU,KAAV,CAAgB,IAAhB,CAAf,CAAV,CADY;EAAb;;AAIA,SAAQ,IAAR,CAAa,YAAU,KAAK,EAAL,CAAvB,CAPqC;AAQrC,SAAQ,IAAR,CAAa,kBAAb,EARqC;;AAUrC,QAAO,OAAP,CAVqC;CAAd;;IAcH;AACpB,UADoB,WACpB,CAAY,QAAZ,EAAqB;wBADD,aACC;;AACpB,OAAK,QAAL,GAAgB,QAAhB,CADoB;EAArB;;cADoB;;0BAKZ,OAAO,OAAM;AACpB,OAAI,cAAc,MAAM,MAAN,CAAa,UAAS,QAAT,EAAmB,OAAnB,EAA2B;AACzD,WAAO,SAAS,MAAT,CAAgB,QAAQ,WAAR,CAAvB,CADyD;IAA3B,EAE5B,EAFe,CAAd,CADgB;;AAKpB,OAAI,QAAQ,MAAM,MAAN,CAAa,UAAS,QAAT,EAAmB,OAAnB,EAA2B;AACnD,WAAO,SAAS,MAAT,CAAgB,QAAQ,KAAR,CAAvB,CADmD;IAA3B,EAEtB,EAFS,CAAR,CALgB;;AASpB,OAAI,aAAa,0BAA0B,WAA1B,CAAb;OACH,aAAa,MAAM,MAAN,CAAa,UAAb,CAAb;OACA,mBAAmB,WACjB,GADiB,CACb,iBADa,EAEjB,GAFiB,CAEb,UAAS,IAAT,EAAc;AAClB,SAAK,OAAL,CAAa,QAAQ,KAAR,CAAb,CADkB;AAElB,SAAK,IAAL,CAAU,QAAQ,GAAR,CAAV,CAFkB;;AAIlB,WAAO,KAAK,IAAL,CAAU,IAAV,CAAP,CAJkB;IAAd,CAFa,CAQjB,IARiB,CAQZ,MARY,CAAnB,CAXmB;;AAqBpB,UAAO,GAAG,SAAH,CAAa,KAAK,QAAL,EAAe,gBAA5B,EAA8C,EAAC,UAAU,MAAV,EAA/C,CAAP,CArBoB;;;;QALD","file":"trello-inbox.js","sourcesContent":["import R from 'ramda';\nimport Promise from 'bluebird';\n\nimport Matcher from '../../core/matcher';\nimport {LINE_TYPE_MULTI} from '../../core/rules';\n\nlet fs = Promise.promisifyAll(require('fs'));\n\n\nlet filterCardWithAnnotations = R.curry(function(annotations, card){\n\tlet annotationForCard = annotations.filter(function(annotation){\n\t\treturn annotation.id === card.id;\n\t});\n\n\treturn (annotationForCard.length === 0);\n})\n\nlet markers = Matcher.getForType('default').matchers.filter(function(matcher){\n\treturn matcher.type === LINE_TYPE_MULTI;\n})[0].marker;\n\nlet createTextForCard = function(card){\n\tlet content = [card.name];\n\n\tif(card.desc){\n\t\tcontent = content.concat(card.desc.split('\\n'));\n\t}\n\n\tcontent.push('TR_ID: '+card.id);\n\tcontent.push('TR_STATUS: To Do');\n\n\treturn content;\n};\n\n\nexport default class TrelloInbox{\n\tconstructor(filepath){\n\t\tthis.filepath = filepath;\n\t}\n\n\tprocess(files, lists){\n\t\tlet annotations = files.reduce(function(previous, current){\n\t\t\treturn previous.concat(current.annotations);\n\t\t}, []);\n\n\t\tlet\tcards = lists.reduce(function(previous, current){\n\t\t\treturn previous.concat(current.cards);\n\t\t}, []);\n\n\t\tlet cardFilter = filterCardWithAnnotations(annotations),\n\t\t\tinboxCards = cards.filter(cardFilter),\n\t\t\tinboxAnnotations = inboxCards\n\t\t\t\t.map(createTextForCard)\n\t\t\t\t.map(function(text){\n\t\t\t\t\ttext.unshift(markers.start);\n\t\t\t\t\ttext.push(markers.end);\n\n\t\t\t\t\treturn text.join('\\n');\n\t\t\t\t})\n\t\t\t\t.join('\\n\\n');\n\n\t\treturn fs.writeFile(this.filepath, inboxAnnotations, {encoding: 'utf8'});\n\t}\n\n}\n"]}