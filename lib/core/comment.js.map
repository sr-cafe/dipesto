{"version":3,"sources":["../../src/core/comment.es6"],"names":[],"mappings":"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","file":"comment.js","sourcesContent":["import {LINE_TYPE_SINGLE, LINE_TYPE_MULTI} from './rules';\n\nexport default class Comment{\n\tstatic createComment(matcher, line, lineNumber, linesArray){\n\t\tlet comment = null;\n\n\t\tif(matcher.type === LINE_TYPE_SINGLE){\n\t\t\tcomment = new Comment(\n\t\t\t\tmatcher,\n\t\t\t\t[line],\n\t\t\t\t{\n\t\t\t\t\tstart: lineNumber,\n\t\t\t\t\tend: lineNumber\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t\telse{\n\t\t\tcomment = Comment.createMultilineComment(\n\t\t\t\tmatcher,\n\t\t\t\tlineNumber,\n\t\t\t\tlinesArray\n\t\t\t);\n\t\t}\n\n\t\treturn comment;\n\t}\n\n\tstatic createMultilineComment(matcher, startLine, linesArray){\n\t\tlet pattern = matcher.pattern.end,\n\t\t\tscanLines = linesArray.slice(startLine),\n\t\t\tclosingCommentLine,\n\t\t\tcomment;\n\n\t\tscanLines.some(function(line, i) {\n\t\t\treturn pattern.test(line.trim())\n\t\t\t\t? ((closingCommentLine = i), true)\n\t\t\t\t: false;\n\t\t});\n\n\t\tlet range = {\n\t\t\tstart: startLine,\n\t\t\tend: startLine + closingCommentLine\n\t\t};\n\n\t\tlet content = linesArray.slice(range.start, range.end + 1);\n\n\t\t// Overwrite those lines on the original array so we don't need to scan them\n\t\tfor(let i = range.start + 1; i <= range.end; i++){\n\t\t\tlinesArray[i] = '';\n\t\t}\n\n\t\tcomment = new Comment(matcher, content, range);\n\n\t\treturn comment;\n\t}\n\n\tstatic cleanCommentLine(line, cleaners){\n\t\treturn cleaners.reduce(function(previous, current){\n\t\t\treturn previous.replace(current, '').trim();\n\t\t}, line);\n\t}\n\n\tconstructor(matcher, content, range){\n\t\tthis.type = matcher.type;\n\t\tthis.matcher = matcher;\n\t\tthis.originalContent = content;\n\n\t\tthis.content = content.map(function(line){\n\t\t\treturn line.trim();\n\t\t});\n\t\tthis.range = range;\n\t}\n\n\tclean(_cleaners){\n\t\tthis.content = this.content.map((line, index, array) => {\n\t\t\tlet cleaners = [];\n\n\t\t\tif(index === 0){\n\t\t\t\tcleaners.push(this.matcher.pattern.start);\n\t\t\t};\n\n\t\t\tif(index === array.length - 1){\n\t\t\t\tcleaners.push(this.matcher.pattern.end);\n\t\t\t};\n\n\t\t\tif(_cleaners){\n\t\t\t\tcleaners = cleaners.concat(_cleaners);\n\t\t\t};\n\n\t\t\treturn Comment.cleanCommentLine(line, cleaners);\n\n\t\t}).filter(function(line){\n\t\t\treturn line.trim().length > 0;\n\t\t});\n\n\t\treturn this;\n\t}\n}\n"]}