{"version":3,"sources":["../../src/core/index.js"],"names":[],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AAEA;;;;AACA;;;;;;;;AAEA,IAAI,KAAK,mBAAQ,YAAR,CAAqB,QAAQ,IAAR,CAArB,CAAL;;IAEiB;;;sBACI;AAAE,UAAO,CAAC,KAAD,CAAP,CAAF;;;;AAExB,UAHoB,OAGpB,GAAa;wBAHO,SAGP;;;;;;;;AAOZ,OAAK,OAAL,GAAe,CACd,eAAK,IAAL,CAAU,QAAQ,GAAR,EAAV,EAAyB,KAAzB,CADc,CAAf,CAPY;;AAWZ,OAAK,UAAL,GAAkB,eAAlB,CAXY;EAAb;;cAHoB;;wBAiBf;;;AACJ,UAAO,mBAAQ,MAAR,CAAe,KAAK,OAAL,EAAc,kBAA7B,EAAiD,EAAjD,EACL,MADK,CACE,kBAAQ,oBAAR,CAA6B,KAAK,UAAL,CAD/B,EAEL,GAFK,CAED,WAFC,EAGL,MAHK,CAGE,UAAS,IAAT,EAAc;AACrB,WAAO,KAAK,WAAL,IAAoB,KAAK,WAAL,CAAiB,MAAjB,CADN;IAAd,CAHF,CAML,IANK,CAMA,UAAC,KAAD,EAAW;AAChB,UAAK,SAAL,GAAiB,IAAI,IAAJ,GAAW,OAAX,EAAjB,CADgB;AAEhB,UAAK,KAAL,GAAa,KAAb,CAFgB;AAGhB,iBAHgB;IAAX,CANP;;;;;;;;;;;;;;AADI;;;2BA2BG;AACP,UAAO,KAAK,SAAL,CAAe,IAAf,EAAqB,YAArB,EAAmC,CAAnC,CAAP,CADO;;;;QA5CY;;;;;;;;;;;AAsDrB,IAAI,gBAAgB,SAAhB,aAAgB,GAAU;AAC7B,QAAO,QAAQ,UAAR,CADsB;CAAV;;AAIpB,IAAI,uBAAuB,kBAAQ,iBAAR,CAA0B,QAAQ,GAAR,EAA1B,CAAvB;;AAEJ,IAAI,qBAAqB,SAArB,kBAAqB,CAAS,MAAT,EAAiB,WAAjB,EAA6B;AACrD,QAAO,kBAAQ,kBAAR,CAA2B,WAA3B,EAAwC,MAAxC,CAAP,CADqD;CAA7B;;AAIzB,IAAI,cAAc,SAAd,WAAc,CAAS,QAAT,EAAkB;AACnC,QAAO,GAAG,aAAH,CAAiB,QAAjB,EAA2B,EAAC,UAAS,MAAT,EAA5B,EACL,IADK,CACA,UAAS,OAAT,EAAiB;AACtB,MAAI,SAAS,eAAK,OAAL,CAAa,qBAAqB,QAArB,CAAb,CAAT;MACH,OAAO,eAAK,QAAL,CAAc,QAAd,CAAP,CAFqB;AAGtB,SAAO,mBAAS,OAAT,EAAkB,IAAlB,EAAwB,MAAxB,EAAgC,KAAhC,EAAP,CAHsB;EAAjB,CADP,CADmC;CAAlB;;AASlB,IAAI,eAAe,SAAf,YAAe,CAAS,GAAT,EAAc,KAAd,EAAoB;AACnC,KAAI,iBAAiB,MAAjB,EAAyB;AACzB,SAAO,MAAM,QAAN,EAAP,CADyB;EAA7B;;AAIA,QAAO,KAAP,CALmC;CAApB","file":"index.js","sourcesContent":["import path from 'path';\nimport Promise from 'bluebird';\n\nimport helpers from '../helpers';\nimport File from './file';\n\nlet fs = Promise.promisifyAll(require(\"fs\"));\n\nexport default class Dipesto{\n\tstatic get EXTENSIONS() { return ['es6'] }\n\n\tconstructor(){\n\t\t/* TODO Read command line arguments\n\t\tDon't forget to provide defaults.\n\t\t*/\n\t\t// TODO Allow excluded folders\n\t\t// NOTE Is \"process.cwd()\" necessary?\n\n\t\tthis.folders = [\n\t\t\tpath.join(process.cwd(), 'src')\n\t\t];\n\n\t\tthis.extensions = getExtensions();\n\t}\n\n\trun(){\n\t\treturn Promise.reduce(this.folders, directoriesReducer, [])\n\t\t\t.filter(helpers.filterWithExtensions(this.extensions))\n\t\t\t.map(filesMapper)\n\t\t\t.filter(function(file){\n\t\t\t\treturn file.annotations && file.annotations.length;\n\t\t\t})\n\t\t\t.then((files) => {\n\t\t\t\tthis.timestamp = new Date().getTime();\n\t\t\t\tthis.files = files;\n\t\t\t\treturn this;\n\t\t\t});\n\n\t\t// return Promise.reduce(this.folders, directoriesReducer, [])\n\t\t// \t.filter(helpers.filterWithExtensions(this.extensions))\n\t\t// \t.map(filesMapper)\n\t\t// \t.filter(function(file){\n\t\t// \t\treturn file.annotations && file.annotations.length;\n\t\t// \t})\n\t\t// \t.then(function(files){\n\t\t// \t\treturn {\n\t\t// \t\t\ttimestamp: new Date().getTime(),\n\t\t// \t\t\tfiles: files\n\t\t// \t\t}\n\t\t// \t});\n\t}\n\n\toutput(){\n\t\treturn JSON.stringify(this, JSONReplacer, 4);\n\t}\n}\n\n/***************\n\tHELPERS\n***************/\n\n// TODO Implement injection of extensions via command line\nlet getExtensions = function(){\n\treturn Dipesto.EXTENSIONS;\n};\n\nlet getPathRelativeToCWD = helpers.getPathRelativeTo(process.cwd());\n\nlet directoriesReducer = function(result, currentPath){\n\treturn helpers.listDirectoryFiles(currentPath, result);\n};\n\nlet filesMapper = function(filePath){\n\treturn fs.readFileAsync(filePath, {encoding:'utf8'})\n\t\t.then(function(content){\n\t\t\tlet folder = path.dirname(getPathRelativeToCWD(filePath)),\n\t\t\t\tname = path.basename(filePath);\n\t\t\treturn new File(content, name, folder).parse();\n\t\t});\n};\n\nlet JSONReplacer = function(key, value){\n    if (value instanceof RegExp) {\n        return value.toString();\n    }\n\t\n    return value;\n};\n"]}