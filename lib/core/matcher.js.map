{"version":3,"sources":["../../src/core/matcher.es6"],"names":[],"mappings":"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","file":"matcher.js","sourcesContent":["/*\nTODO: Allow to define a different set of rules.\nTR_ID: 56f2704002f134fd24c9f746\nTR_STATUS: To Do\n*/\n/*\nTODO: Allow to add rules to the current set.\nTR_ID: 56f27040053daa8e2a002198\nTR_STATUS: To Do\n*/\n\nimport R from 'ramda';\n\nimport {COMMENTS, LINE_TYPE_MULTI} from './rules';\nimport Comment from './comment';\n\nexport default class Matcher{\n\tstatic getForType(type){\n\t\ttry{\n\t\t\treturn getForType(type);\n\t\t}\n\t\tcatch(e){\n\t\t\tthrow new Error(e.message);\n\t\t}\n\t}\n\n\tstatic getForExtension(extension){\n\t\treturn getForExtension(extension);\n\t}\n\n\tconstructor(rule){\n\t\tObject.assign(this, rule);\n\n\t\tthis.getPattern = getPattern(this.matchers);\n\t}\n\n\tgetComment(line, lineNumber, linesArray){\n\t\tlet pattern = this.getPattern(line),\n\t\t\tcomment = null;\n\n\t\t// In case more than one pattern matches ('#' and '##') select the multiline type\n\t\tif(pattern.length > 1){\n\t\t\tpattern = pattern.filter(function(current){\n\t\t\t\treturn current.type == LINE_TYPE_MULTI;\n\t\t\t});\n\t\t};\n\n\t\tif(pattern.length > 0){\n\t\t\tpattern = pattern[0];\n\t\t\tcomment = Comment.createComment(\n\t\t\t\tpattern,\n\t\t\t\tline,\n\t\t\t\tlineNumber,\n\t\t\t\tlinesArray\n\t\t\t).clean(this.cleaners);\n\t\t};\n\n\t\treturn comment;\n\t}\n}\n\n/***************\n\tHELPERS\n***************/\nlet getForType = R.memoize(function(type){\n\tif(!type){\n\t\treturn null;\n\t}\n\n\tlet filter = filterRuleByType(type),\n\t\trule = COMMENTS.filter(filter);\n\n\tif(!rule.length){\n\t\tthrow new Error(`No rules defined for type \"${type}\"`);\n\t}\n\n\treturn new Matcher(rule[0]);\n});\n\nlet getForExtension = R.memoize(function(extension){\n\tif(!extension){\n\t\treturn null;\n\t}\n\n\tif(extension.substring(0, 1) == '.'){\n\t\textension = extension.substring(1);\n\t}\n\n\tlet filter = filterRuleByExtension(extension),\n\t\trule = COMMENTS.filter(filter);\n\n\treturn (rule.length > 0) ? getForType(rule[0].type) : getForType('default');\n});\n\nlet filterRuleByType = R.curry(function(type, rule){\n\treturn type === rule.type;\n});\n\nlet filterRuleByExtension = R.curry(function(extension, rule){\n\treturn rule.extensions.filter(function(ext){\n\t\treturn extension === ext;\n\t}).length > 0;\n});\n\nlet filterComment = R.curry(function(line, matcher){\n\treturn matcher.pattern.start.test(line);\n});\n\nlet getPattern = R.curry(function(matchers, line){\n\treturn matchers.filter(filterComment(line.trim()))\n});\n"]}